-- Create core table
CREATE TABLE Merchant (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name varchar,
  CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Customer (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  UserName varchar,
  Password bytea,
  Email varchar,
  FullName bytea,
  Birthdate date,
  CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE BillingAddress (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CustomerID int,
  Street bytea,
  CityID int,
  AddressName varchar,
  CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE City (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CountryID int,
  Name varchar
);

CREATE TABLE Country (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name varchar
);

CREATE TABLE Currency (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Code varchar,
  Name varchar
);

CREATE TABLE PaymentMethod (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name varchar
);

CREATE TABLE Device (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name varchar
);

CREATE TABLE TransactionStatus (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name varchar
);

CREATE TABLE TransactionLocation (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  IpAddress varchar,
  CityID int
);

CREATE TABLE Transaction (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TransactionStatusID int,
  MerchantID int,
  Amount float,
  CurrencyID int,
  PaymentMethodID int,
  DeviceID int,
  CustomerID int,
  BillingAddressID int, -- Voluntary denormalization for performance (ID → BillingAddressID → CustomerID)
  TransactionLocationID int,
  DateTime timestamp,
  CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) PARTITION BY RANGE (DateTime);

CREATE TABLE TransactionStateChanges (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TransactionID int,
  FromStatusID int,
  ToStatusID int,
  Reason varchar,
  UpdatedBy varchar,
  UpdatedAt datetime
);

CREATE TABLE FraudIndicator (
  ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TransactionID int,
  AnomalyScore float,
  IsFraud boolean
);

-- Insert default values
INSERT INTO Currency (Code, Name) VALUES
("USD", "US Dollar"),
("EUR", "Euro"),
("GBP", "British Pound"),
("CNY", "Chinese Yuan"),
("JPY", "Japanese Yen");

INSERT INTO PaymentMethod (Name) VALUES
("Credit Card"),
("Debit Card"),
("PayPal"),
("Bank Transfer"),
("Digital Wallet");

INSERT INTO Device (Name) VALUES
("Mobile"),
("Desktop"),
("Tablet");

INSERT INTO TransactionStatus (Name) VALUES
("Successful"),
("Failed"),
("Refunded"),
("Pending");

-- Indexing for speeding up data retrieval
CREATE INDEX Idx_UserName ON Customer (UserName);
CREATE INDEX Idx_Email ON Customer (Email);
CREATE INDEX Idx_CustomerID ON BillingAddress (CustomerID);
CREATE INDEX Idx_CityID ON BillingAddress (CityID);
CREATE INDEX Idx_Code ON Currency (Code);
CREATE INDEX Idx_Name ON PaymentMethod (Name);
CREATE INDEX Idx_Name ON Device (Name);
CREATE INDEX Idx_Name ON TransactionStatus (Name);
CREATE INDEX Idx_IpAddress ON TransactionLocation (IpAddress);
CREATE INDEX Idx_CityID ON TransactionLocation (CityID);
CREATE INDEX Idx_TransactionID ON TransactionStateChanges (TransactionID);
CREATE INDEX Idx_UpdatedAt ON TransactionStateChanges (UpdatedAt);

-- Referential integrity for data consistency
ALTER TABLE BillingAddress ADD FOREIGN KEY (CustomerID) REFERENCES Customer (ID);
ALTER TABLE BillingAddress ADD FOREIGN KEY (CityID) REFERENCES City (ID);
ALTER TABLE City ADD FOREIGN KEY (CountryID) REFERENCES Country (ID);
ALTER TABLE TransactionLocation ADD FOREIGN KEY (CityID) REFERENCES City (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (TransactionStatusID) REFERENCES TransactionStatus (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (MerchantID) REFERENCES Merchant (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (CurrencyID) REFERENCES Currency (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (PaymentMethodID) REFERENCES PaymentMethod (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (DeviceID) REFERENCES Device (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (CustomerID) REFERENCES Customer (ID);
ALTER TABLE Transaction ADD FOREIGN KEY (TransactionLocationID) REFERENCES TransactionLocation (ID);
ALTER TABLE TransactionStateChanges ADD FOREIGN KEY (TransactionID) REFERENCES Transaction (ID);
ALTER TABLE TransactionStateChanges ADD FOREIGN KEY (FromStatusID) REFERENCES TransactionStatus (ID);
ALTER TABLE TransactionStateChanges ADD FOREIGN KEY (ToStatusID) REFERENCES TransactionStatus (ID);
ALTER TABLE FraudIndicator ADD FOREIGN KEY (TransactionID) REFERENCES Transaction (ID);

-- Role-Based Access Control (RBAC) for security
CREATE ROLE Admin;
CREATE ROLE Developer;
CREATE ROLE ReadOnlyUser;

GRANT ALL PRIVILEGES ON DATABASE mydb TO Admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO Developer;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ReadOnlyUser;

-- Enable logging for technical audit purpose
ALTER SYSTEM SET log_connections = 'on';
ALTER SYSTEM SET log_disconnections = 'on';
ALTER SYSTEM SET log_statement = 'all';